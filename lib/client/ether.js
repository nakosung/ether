// Generated by CoffeeScript 1.6.2
(function() {
  var ether,
    __slice = [].slice;

  ether = angular.module('ether', []);

  ether.factory('sockjs', function($rootScope) {
    var Server;

    Server = (function() {
      function Server() {
        var _this = this;

        this.handleConnectionLost();
        $rootScope.$on('sockjs.json', function(e, json) {
          if (json.error != null) {
            console.error(json.error);
          }
          if (json.log != null) {
            return console.log(json.log);
          }
        });
      }

      Server.prototype.updateAngularJs = function() {
        return !$rootScope.$$phase && $rootScope.$apply();
      };

      Server.prototype.handleConnectionLost = function() {
        var _this = this;

        if (this.heartbeat != null) {
          clearTimeout(this.heartbeat);
          this.heartbeat = void 0;
        }
        this.online = false;
        $rootScope.$broadcast('sockjs.offline', this);
        this.updateAngularJs();
        this.sock = new SockJS('/sockjs');
        this.sock.onopen = function() {
          return _this.initSock();
        };
        return this.sock.onclose = function() {
          return setTimeout((function() {
            return _this.handleConnectionLost();
          }), 250);
        };
      };

      Server.prototype.initSock = function() {
        var _this = this;

        this.online = true;
        this.sock.onmessage = function(e) {
          var data, exception;

          if (e.data === 'client-src:changed') {
            window.location.reload();
          }
          $rootScope.$broadcast("sockjs.raw", e);
          try {
            data = JSON.parse(e.data);
            $rootScope.$broadcast("sockjs.json", data);
          } catch (_error) {
            exception = _error;
          }
          return _this.updateAngularJs();
        };
        $rootScope.$broadcast('sockjs.online', this);
        this.updateAngularJs();
        return this.heartbeat = setInterval((function() {
          return _this.send({
            heartbeat: true
          });
        }), 10000);
      };

      Server.prototype.send = function(json) {
        return this.sock.send(JSON.stringify(json));
      };

      return Server;

    })();
    return new Server();
  });

  ether.factory('collection', function(sockjs, $rootScope) {
    var Collection, collections;

    collections = {};
    Collection = (function() {
      function Collection(name) {
        var _this = this;

        this.name = name;
        if (sockjs.online) {
          this.init();
        }
        $rootScope.$on('sockjs.online', function() {
          return _this.init();
        });
        $rootScope.$on('sockjs.offline', function() {
          return _this.uninit();
        });
        this.data = void 0;
        $rootScope.$on('sockjs.json', function(e, json) {
          var _ref;

          if (json.channel !== _this.name) {
            return;
          }
          if ((_ref = _this.data) == null) {
            _this.data = {};
          }
          jsondiffpatch.patch(_this.data, json.diff);
          if (_.keys(_this.data).length === 0) {
            _this.data = void 0;
          }
          return $rootScope.$broadcast("collection:update", _this);
        });
      }

      Collection.prototype.init = function() {
        return sockjs.send({
          req: {
            channel: this.name
          }
        });
      };

      Collection.prototype.uninit = function() {
        return this.data.splice(0, this.data.length);
      };

      return Collection;

    })();
    return function(name) {
      var collection;

      if (!collections[name]) {
        collection = new Collection(name);
        collections[name] = collection;
      }
      return collections[name];
    };
  });

  ether.factory('rpc', function(sockjs, $rootScope, collection) {
    var instance, next_trid, rpc_dir, trs,
      _this = this;

    rpc_dir = collection('rpc');
    instance = {};
    next_trid = 0;
    trs = {};
    $rootScope.$on('sockjs.json', function(e, json) {
      var args, trid, _ref;

      if (json.rpc == null) {
        return;
      }
      _ref = json.rpc, trid = _ref[0], args = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
      if (typeof trs[trid] === "function") {
        trs[trid].apply(trs, args);
      }
      return delete trs[trid];
    });
    $rootScope.$on('collection:update', function(e, collection) {
      var k, method, v, _ref, _results;

      if (collection === rpc_dir) {
        for (k in instance) {
          delete instance[k];
        }
        _ref = collection.data;
        _results = [];
        for (method in _ref) {
          v = _ref[method];
          _results.push((function(method) {
            var fn, i, o, oo, _ref1;

            fn = instance[method] = function() {
              var args, cb, t, trid, _i;

              args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
              trid = null;
              if (cb != null) {
                if (_.isFunction(cb)) {
                  trid = next_trid++;
                  trs[trid] = cb;
                } else {
                  args.push(cb);
                }
              }
              t = {
                rpc: {}
              };
              t.rpc[method] = [trid].concat(__slice.call(args));
              console.log(t.rpc);
              return sockjs.send(t);
            };
            o = method.split(':');
            if (o.length > 1) {
              i = instance;
              while (o.length > 1) {
                oo = o.shift();
                if ((_ref1 = i[oo]) == null) {
                  i[oo] = {};
                }
                i = i[oo];
              }
              return i[o.shift()] = fn;
            }
          })(method));
        }
        return _results;
      }
    });
    return instance;
  });

}).call(this);
