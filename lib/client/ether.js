// Generated by CoffeeScript 1.6.2
(function() {
  var ether,
    __slice = [].slice;

  ether = angular.module('ether', []);

  ether.factory('sockjs', function($rootScope) {
    var Server;

    Server = (function() {
      function Server() {
        var _this = this;

        this.handleConnectionLost();
        $rootScope.$on('sockjs.json', function(e, json) {
          if (json.error != null) {
            console.error(json.error);
          }
          if (json.log != null) {
            return console.log(json.log);
          }
        });
      }

      Server.prototype.updateAngularJs = function() {
        return !$rootScope.$$phase && $rootScope.$apply();
      };

      Server.prototype.handleConnectionLost = function() {
        var _this = this;

        if (this.heartbeat != null) {
          clearTimeout(this.heartbeat);
          this.heartbeat = void 0;
        }
        this.online = false;
        $rootScope.$broadcast('sockjs.offline', this);
        this.updateAngularJs();
        this.sock = new SockJS('/sockjs');
        this.sock.onopen = function() {
          return _this.initSock();
        };
        return this.sock.onclose = function() {
          return setTimeout((function() {
            return _this.handleConnectionLost();
          }), 250);
        };
      };

      Server.prototype.initSock = function() {
        var _this = this;

        this.online = true;
        this.sock.onmessage = function(e) {
          var data, exception;

          if (e.data === 'client-src:changed') {
            window.location.reload();
          }
          $rootScope.$broadcast("sockjs.raw", e);
          try {
            data = JSON.parse(e.data);
            $rootScope.$broadcast("sockjs.json", data);
          } catch (_error) {
            exception = _error;
          }
          return _this.updateAngularJs();
        };
        $rootScope.$broadcast('sockjs.online', this);
        this.updateAngularJs();
        return this.heartbeat = setInterval((function() {
          return _this.send({
            heartbeat: true
          });
        }), 10000);
      };

      Server.prototype.send = function(json) {
        return this.sock.send(JSON.stringify(json));
      };

      return Server;

    })();
    return new Server();
  });

  ether.factory('collection', function(sockjs, $rootScope) {
    var Collection, Data, all, collections, ret;

    collections = {};
    all = {};
    Data = (function() {
      function Data() {}

      Data.prototype.array = function() {
        var a;

        a = _.values(this);
        return _.sortBy(a, function(x) {
          return x._i;
        });
      };

      return Data;

    })();
    Collection = (function() {
      function Collection(name) {
        var _this = this;

        this.name = name;
        if (sockjs.online) {
          this.init();
        }
        this.safe_name = this.name.replace(':', '_');
        $rootScope.$on('sockjs.online', function() {
          return _this.init();
        });
        $rootScope.$on('sockjs.offline', function() {
          return _this.uninit();
        });
        this.data = void 0;
        $rootScope.$on('sockjs.json', function(e, json) {
          var _ref;

          if (json.channel !== _this.name) {
            return;
          }
          if ((_ref = _this.data) == null) {
            _this.data = new Data;
          }
          jsondiffpatch.patch(_this.data, json.diff);
          if (_.keys(_this.data).length === 0) {
            _this.data = void 0;
          }
          _this.sync();
          return $rootScope.$broadcast("collection:update", _this);
        });
      }

      Collection.prototype.init = function() {
        return sockjs.send({
          req: {
            channel: this.name
          }
        });
      };

      Collection.prototype.uninit = function() {
        this.data = void 0;
        return this.sync();
      };

      Collection.prototype.sync = function() {
        if (all[this.safe_name] === this.data) {
          return;
        }
        all[this.safe_name] = this.data;
        return $rootScope.$broadcast("collection:sync", this);
      };

      return Collection;

    })();
    ret = function(name) {
      var collection;

      if (name != null) {
        if (!collections[name]) {
          collection = new Collection(name);
          collections[name] = collection;
        }
        return collections[name];
      }
    };
    ret.all = all;
    return ret;
  });

  ether.factory('autocol', function(collection, $rootScope) {
    return function(container, cols) {
      var update;

      if (!_.isArray(cols)) {
        cols = cols.split(' ');
      }
      update = function() {
        var c, col, _i, _len, _results;

        _results = [];
        for (_i = 0, _len = cols.length; _i < _len; _i++) {
          c = cols[_i];
          col = collection(c);
          _results.push(container[col.safe_name] = col.data);
        }
        return _results;
      };
      $rootScope.$on('collection:sync', update);
      return update();
    };
  });

  ether.factory('rpc', function(sockjs, $rootScope, collection) {
    var instance, next_trid, rpc_dir, trs,
      _this = this;

    rpc_dir = collection('rpc');
    instance = {};
    next_trid = 0;
    trs = {};
    $rootScope.$on('sockjs.json', function(e, json) {
      var args, trid, _ref;

      if (json.rpc == null) {
        return;
      }
      _ref = json.rpc, trid = _ref[0], args = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
      if (typeof trs[trid] === "function") {
        trs[trid].apply(trs, args);
      }
      return delete trs[trid];
    });
    $rootScope.$on('collection:update', function(e, collection) {
      var k, method, v, _fn, _ref;

      if (collection === rpc_dir) {
        for (k in instance) {
          delete instance[k];
        }
        _ref = collection.data;
        _fn = function(method) {
          var fn, i, o, oo, _ref1;

          fn = instance[method] = function() {
            var args, cb, t, trid, _i;

            args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
            trid = null;
            if (cb != null) {
              if (_.isFunction(cb)) {
                trid = next_trid++;
                trs[trid] = cb;
              } else {
                args.push(cb);
              }
            }
            t = {
              rpc: {}
            };
            t.rpc[method] = [trid].concat(__slice.call(args));
            console.log(t.rpc);
            return sockjs.send(t);
          };
          o = method.split(':');
          if (o.length > 1) {
            i = instance;
            while (o.length > 1) {
              oo = o.shift();
              if ((_ref1 = i[oo]) == null) {
                i[oo] = {};
              }
              i = i[oo];
            }
            return i[o.shift()] = fn;
          }
        };
        for (method in _ref) {
          v = _ref[method];
          _fn(method);
        }
        return $rootScope.$broadcast('rpc:update');
      }
    });
    return instance;
  });

  ether.factory('autologin', function($rootScope, rpc) {
    var AutoLogin;

    AutoLogin = (function() {
      function AutoLogin() {
        var _this = this;

        this.cred = null;
        this.install();
        $rootScope.$on('rpc:update', function() {
          _this.install();
          if (_this.cred && (rpc.noauth != null) && _this.mayTry) {
            _this.mayTry = false;
            return rpc.noauth.login(_this.cred.name, _this.cred.pwd);
          }
        });
        $rootScope.$on('sockjs.offline', function() {
          return _this.mayTry = rpc.auth != null;
        });
      }

      AutoLogin.prototype.install = function() {
        var org, _ref, _ref1,
          _this = this;

        if ((((_ref = rpc.noauth) != null ? _ref.login : void 0) != null) && !rpc.noauth.login.__installed) {
          org = rpc.noauth.login;
          rpc.noauth.login.__installed = true;
          rpc.noauth.login = function() {
            var args, name, pwd;

            name = arguments[0], pwd = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
            _this.store(name, pwd);
            return org.apply(null, [name, pwd].concat(__slice.call(args)));
          };
        }
        if ((((_ref1 = rpc.auth) != null ? _ref1.logout : void 0) != null) && !rpc.auth.logout.__installed) {
          org = rpc.auth.logout;
          rpc.auth.logout.__installed = true;
          return rpc.auth.logout = function() {
            var args;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            _this.clear();
            return org.apply(null, args);
          };
        }
      };

      AutoLogin.prototype.store = function(name, pwd) {
        this.cred = {
          name: name,
          pwd: pwd
        };
        return true;
      };

      AutoLogin.prototype.clear = function() {
        this.cred = null;
        return true;
      };

      return AutoLogin;

    })();
    return new AutoLogin();
  });

  ether.factory('subscribe', function($rootScope) {
    var subs,
      _this = this;

    subs = [];
    $rootScope.$on('sockjs.json', function(e, json) {
      var channel, message, _ref;

      if (json.pub == null) {
        return;
      }
      _ref = json.pub, channel = _ref[0], message = _ref[1];
      return subs.forEach(function(sub) {
        if (sub.pattern instanceof RegExp && sub.pattern.test(channel) || sub.pattern === channel) {
          return sub.fn(channel, message);
        }
      });
    });
    return function(pattern, fn) {
      var o;

      o = {
        pattern: pattern,
        fn: fn
      };
      subs.push(o);
      return function() {
        var i;

        i = subs.indexOf(o);
        return subs.splice(i, 1);
      };
    };
  });

}).call(this);
